/**************************************************************************************
 * Author: Jake Carlson
 * Course: EGR 226 - 902
 * Date: 04/1/2021
 * Project: lab10part3
 * File: part3main.c
 * Description: This program uses the LCD to print the current temp and a push button
 * to cycle between Farenheit and Celsius.
 *
 **************************************************************************************/


#include "msp.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "SysTick_Library.h"
#include "LCD_Library.h"

//function prototypes
uint8_t num, pressed;
uint8_t Keypad_Read(void);//function prototypes
void keyinit();
void dcmoto();
void servodelay(uint16_t Cycle);
void LEDinit();
void REDLED();
void GREENLED();
void BLUELED();
void PORT3_IRQHandler();
int stopflag;




void main(void)
{
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;     // stop watchdog timer

    enum states{MAIN, DC, LIGHTS, DOOR, RED, GREEN, BLUE
    };

    enum states state;

    SysTickInit_NoInterrupts();
    lcdInit();
    keyinit();
    lcdClear();
    LEDinit();
    servodelay(5);


    state = MAIN;
    //stopflag = 0;


    while(1){

        pressed = Keypad_Read();

        switch(state){

        case MAIN:
            lcdSetText("[1] Door", 3 , 0);//function from LCD library
            lcdSetText("[2] Motor", 3 , 1);
            lcdSetText("[3] Lights", 3 , 2);

            if(pressed){
                SysTick_delay_ms(10);
                if(num==1){
                    lcdClear();
                    state = DOOR;
                }
                if(num==2){
                    lcdClear();
                    state = DC;
                }
                if(num==3){
                    lcdClear();
                    state = LIGHTS;
                }
            }
            break;

        case DOOR:
            lcdSetText("[1] Open Door", 1 , 0);//function from LCD library
            lcdSetText("[2] Close Door", 1 , 1);
            lcdSetText("* to go back", 1, 3);
            if(pressed){
                SysTick_delay_ms(10);
                if(num==1){
                    servodelay(11);
                    P2->OUT &= ~BIT0;
                    P2->OUT |= BIT1;
                }
                if(num==2){
                    servodelay(5);
                    P2->OUT &= ~BIT1;
                    P2->OUT |= BIT0;
                }
                if(num==10){
                    P2->OUT &= ~BIT0;
                    P2->OUT &= ~BIT1;
                    servodelay(5);
                    lcdClear();
                    state = MAIN;
                }
            }

            break;


        case DC:
            lcdSetText("Motor Speed", 2, 0);
            lcdSetText("[0-9]",5, 1);
            lcdSetText("* to go back", 1, 3);
            dcmoto();

            if(pressed){
                SysTick_delay_ms(10);
                if(num==10){
                    lcdClear();
                    state = MAIN;
                }
            }
            break;

        case LIGHTS:
            lcdSetText("[1] RED", 4, 0);
            lcdSetText("[2] GREEN", 4, 1);
            lcdSetText("[3] BLUE", 4, 2);
            lcdSetText("* to go back", 1, 3);

            if(pressed){
                SysTick_delay_ms(10);
                if(num==1){
                    lcdClear();
                    state = RED;
                }
                if(num==2){
                    lcdClear();
                    state = GREEN;
                }
                if(num==3){
                    lcdClear();
                    state = BLUE;
                }

                if(num==10){
                    lcdClear();
                    state = MAIN;
                }
            }
            break;

        case RED:
            lcdSetText("Pick Brightness", 0, 0);
            lcdSetText("[0-100]",5, 1);
            lcdSetText("* to go back", 1, 3);
            lcdSetText("RED", 7, 2);
            REDLED();


            if(pressed){
                if(num==10){
                    lcdClear();
                    P2->OUT &= ~BIT5;
                    state = LIGHTS;
                }
            }

            break;

        case GREEN:
            lcdSetText("Pick Brightness", 0, 0);
            lcdSetText("[0-100]",5, 1);
            lcdSetText("GREEN", 6, 2);
            lcdSetText("* to go back", 1, 3);
            GREENLED();

            if(pressed){
                if(num==10){
                    P2->OUT &= ~BIT7;
                    lcdClear();
                    state = LIGHTS;
                }
            }
            break;

        case BLUE:
            lcdSetText("Pick Brightness", 0, 0);
            lcdSetText("[0-100]",5, 1);
            lcdSetText("BLUE", 6, 2);
            lcdSetText("* to go back", 1, 3);
            BLUELED();

            if(pressed){
                if(num==10){
                    P2->OUT &= ~BIT6;
                    lcdClear();
                    state = LIGHTS;
                }
            }
            break;

        }
        if(stopflag == 1){
            lcdClear();
            lcdSetText("Emergency Stop", 1, 0);
            stopflag = 0;
            SysTick_delay_ms(3000);
            lcdClear();
            state = MAIN;
        }

    }

}

uint8_t Keypad_Read(void){//function given by Professor Krug

    uint8_t col, row;

    for(col = 0; col<3; col++){
        P4DIR = 0x00;
        P4DIR |=BIT(4+col);
        P4OUT &= ~BIT(4+col);
        SysTick_delay_ms(10);
        row = P4IN & 0x0F;

        while(!(P4IN & BIT0)|!(P4IN & BIT1)|!(P4IN & BIT2)|!(P4IN & BIT3));

        if(row != 0x0F){
            break;
        }
    }

    P4DIR = 0x00;
    if(col == 3){
        return 0;
    }
    if(row == 0x0E){
        num = col +1;
    }
    if(row == 0x0D){
        num = 3 + col +1;
    }
    if(row == 0x0B){
        num = 6+ col +1;
    }
    if(row == 0x07){
        num = 9 + col +1;
    }
    return 1;
}
void keyinit(){

    P4->SEL0 &= ~0xF;
    P4->SEL1 &= ~0xF;//initialize rows
    P4->DIR &= ~0xF;
    P4->REN |= 0xF;
    P4->OUT |= 0xF;

    P4->SEL0 &= ~0x70;
    P4->SEL1 &= ~0x70;//initialize columns
    P4->DIR &= ~0x70;

    P3->SEL0 &= ~BIT0;
    P3->SEL1 &= ~BIT0;//button init from previous lab for stop
    P3->DIR &= ~BIT0;
    P3->REN |= BIT0;
    P3->OUT |= BIT0;

    P3->IES &= ~BIT0;//DC motor interrupt
    P3->IE |= BIT0;
    P3->IFG = 0;

    NVIC_EnableIRQ(PORT3_IRQn);//interrupt enable
    __enable_irq();

}

void dcmoto(){
    double dutyCyc, on;

    P2->SEL1 &=~BIT4;
    P2->SEL0 |= BIT4;//Timer A initialization for Dc motor pin 2.4
    P2->DIR |= BIT4;

    TIMER_A0->CCR[0] = 30000;
    TIMER_A0->CCTL[1] = TIMER_A_CCTLN_OUTMOD_7;//Timer A pulse DC
    TIMER_A0->CTL = 0x0214;


    if(pressed){
        if(num == 11){//when 0 is pressed the duty cycle is 0
            dutyCyc = 0;
        }
        if(num<10){//when any other key is pressed that key is the dutycycle.
            dutyCyc = num;
        }

        on =((dutyCyc/10)*30000);//duty cycle is multiplied by period
        TIMER_A0->CCR[1] = on;//run DC motor

    }
}
void servodelay(uint16_t Cycle){

    P6->SEL1 &=~BIT6;
    P6->SEL0 |= BIT6;//Timer A initialization for servo pin 6.6
    P6->DIR |= BIT6;

    uint16_t period =(20 *3000);

    TIMER_A2->CCR[0] = period;
    TIMER_A2->CCTL[3] = (0x00E0);
    TIMER_A2->CTL = (0x0214);
    TIMER_A2->CCR[3] = ((Cycle * period)/100);
}
void LEDinit(){
    P2->SEL0 &= ~BIT0;
    P2->SEL1 &= ~BIT0;//MSP LED setup
    P2->DIR |= BIT0;//red
    P2->OUT &= ~BIT0;
    P2->SEL0 &= ~BIT1;//green
    P2->SEL1 &= ~BIT1;
    P2->DIR |= BIT1;
    P2->OUT &= ~BIT1;
}
void REDLED(){

    double dutyCyc, on;

    P2->SEL1 &=~BIT5;
    P2->SEL0 |= BIT5;//Timer A initialization for Dc motor pin 2.4
    P2->DIR |= BIT5;

    TIMER_A0->CCR[0] = 30000;
    TIMER_A0->CCTL[2] = TIMER_A_CCTLN_OUTMOD_7;//Timer A pulse DC
    TIMER_A0->CTL = 0x0214;


    if(pressed){
        if(num == 11){//when 0 is pressed the duty cycle is 0
            dutyCyc = 0;
        }
        if(num<10){//when any other key is pressed that key is the dutycycle.
            dutyCyc = num;
        }

        on =((dutyCyc/10)*30000);//duty cycle is multiplied by period
        TIMER_A0->CCR[2] = on;//run DC motor

    }

}
void GREENLED(){

    double dutyCyc, on;

    P2->SEL1 &=~BIT7;
    P2->SEL0 |= BIT7;//Timer A initialization for Dc motor pin 2.7
    P2->DIR |= BIT7;

    TIMER_A0->CCR[0] = 30000;
    TIMER_A0->CCTL[4] = TIMER_A_CCTLN_OUTMOD_7;//Timer A pulse DC
    TIMER_A0->CTL = 0x0214;


    if(pressed){
        if(num == 11){//when 0 is pressed the duty cycle is 0
            dutyCyc = 0;
        }
        if(num<10){//when any other key is pressed that key is the dutycycle.
            dutyCyc = num;
        }

        on =((dutyCyc/10)*30000);//duty cycle is multiplied by period
        TIMER_A0->CCR[4] = on;//run DC motor

    }

}

void BLUELED(){

    double dutyCyc, on;

    P2->SEL1 &=~BIT6;
    P2->SEL0 |= BIT6;//Timer A initialization for Dc motor pin 2.7
    P2->DIR |= BIT6;

    TIMER_A0->CCR[0] = 30000;
    TIMER_A0->CCTL[3] = TIMER_A_CCTLN_OUTMOD_7;//Timer A pulse DC
    TIMER_A0->CTL = 0x0214;


    if(pressed){
        if(num == 11){//when 0 is pressed the duty cycle is 0
            dutyCyc = 0;
        }
        if(num<10){//when any other key is pressed that key is the dutycycle.
            dutyCyc = num;
        }

        on =((dutyCyc/10)*30000);//duty cycle is multiplied by period
        TIMER_A0->CCR[3] = on;//run DC motor

    }
}

void PORT3_IRQHandler(){

    if((P3->IFG & BIT0)){//if button 1 is pressed
        TIMER_A0->CCR[1] = 0;
        stopflag = 1;
    }

    P3->IFG = 0;

}
