/**************************************************************************************
* Author: Jake Carlson
* Course: EGR 226 - 902
* Date: 02/14/2021
* Project: lab04part2
* File: main.c
* Description: This program uses the button on the MSP432 and toggles through the Red,
* Green, and Blue LED's using a delay function.
*
**************************************************************************************/

#include "msp.h"
#include <stdlib.h>


/**
 * main.c
 */

uint8_t debounce();

int delay();

void main(void)
{
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;     // stop watchdog timer
    enum states{RED, GREEN, BLUE,
    };

    enum states state;
    int i=0;
    int j = 0;
    P1->SEL0 &= ~2;
    P1->SEL1 &= ~2;
    P1->DIR &= ~2;
    P1->REN |= 2;
    P1->OUT |= 2;

    P2->DIR |= 1;
    P2->DIR |= 2;
    P2->DIR |= 4;
    P2->OUT &= ~1;
    P2->OUT &= ~2;
    P2->OUT &= ~4;


    while(1){
        i = debounce();
        switch(state){

        case RED:
            if((P1->IN & 2)== 0){
                P2->OUT |= 1;
                j=delay();
                if(j==1){
                    P2->OUT |= 1;
                }
                else{
                     P2->OUT &= ~1;
                     state = GREEN;
                }
            }
            break;

        case GREEN:
            if((P1->IN & 2)==0){
                P2->OUT |= 2;
                j=delay();
                if(j==1){
                    P2->OUT |= 2;
                }
                else{
                    P2->OUT &= ~2;
                    state = BLUE;
                }
            }
            break;

        case BLUE:
                    if((P1->IN & 2)==0){
                        P2->OUT |= 4;
                        j=delay();
                        if(j==1){
                            P2->OUT |= 4;
                        }
                        else{
                            P2->OUT &= ~4;
                            state = RED;
                        }
                    }
                    break;

        }
    }


}

uint8_t debounce(){
    static uint16_t pinVal = 0;

    pinVal = (pinVal<<1) | ((P1->IN & 2)/ 2) | 0xf800;
    __delay_cycles(5);

    if(pinVal == 0xfc00)
    return 1;

    return 0;
}
int delay(){
    int i = 0;
    for(i=0; i<=1000; i++){
        if(P1->IN & 2)
            return 1;
        __delay_cycles(30000);
    }
    return 0;
}
